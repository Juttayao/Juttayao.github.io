<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宇宙的偏僻角落</title>
  
  <subtitle>记录和分享每天学到的知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-21T06:31:31.294Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jutta</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书笔记《图解http》（一）</title>
    <link href="http://yoursite.com/2020/09/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%9B%BE%E8%A7%A3http%E3%80%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/09/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%9B%BE%E8%A7%A3http%E3%80%8B%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-09-21T06:17:17.000Z</published>
    <updated>2020-09-21T06:31:31.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读书笔记《图解http》（一）"><a href="#读书笔记《图解http》（一）" class="headerlink" title="读书笔记《图解http》（一）"></a>读书笔记《图解http》（一）</h1><h2 id="1-web及网络基础"><a href="#1-web及网络基础" class="headerlink" title="1. web及网络基础"></a>1. web及网络基础</h2><h3 id="1-1-HTTP发展背景"><a href="#1-1-HTTP发展背景" class="headerlink" title="1.1 HTTP发展背景"></a>1.1 HTTP发展背景</h3><ul><li>HTTP 超文本传输协议，对从客户端到服务器端的一系列运作流程进行了规范。</li><li>www万维网（简称web）构建技术：作为页面文本标记语言的HTML；作为文档协议传递的HTTP；作为文档所在地址的URL统一资源定位符。</li><li>HTTP协议版本发展：HTTP/0.9/1.0/1.1/2.0</li></ul><h3 id="1-2-网络基础-TCP-IP"><a href="#1-2-网络基础-TCP-IP" class="headerlink" title="1.2 网络基础 TCP/IP"></a>1.2 网络基础 TCP/IP</h3><ul><li><p>TCP/IP ：与互联网向关联的协议集合。（说法一：TCP和IP两种协议；说法二：IP协议的通信过程中，使用到的协议族的统称）</p><p>HTTP属于它内部的一个子集。</p></li><li><p>TCP/IP 协议族按层次分别分为以下四层：应用层、传输层、网络层和数据链路层。</p><ul><li>优点：</li></ul><ol><li>各层之间的接口部分规划好后，每个层次内部的设计就可以自由改动了。</li><li>设计更简单，只需要考虑本层次的任务即可。</li></ol><ul><li><p>应用层：决定了向用户提供应用服务时通信的活动。（HTTP协议处于该层）</p></li><li><p>传输层：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>在传输层有两个性质不同的协议：TCP（传输控制协议）和 UDP （用户数据报协议）</p></li><li><p>网络层（网络互联层）：用来处理网络上流动的数据包。（数据包：网络传输到最小数据单位）</p><p>该层规定了通过怎样的路径（传输路线）到达对方计算机，并把数据包传送给对方。</p><p>与对方计算机之间通过多台计算机或万络设备进行传输时，网络层所起的作用就是在众多选项内选择一条传输线路。</p></li><li><p>链路层（数据链路层、网络接口层）：用来处理连接网络的硬件部分。</p></li></ul></li><li><p>TCP/IP通信传输流：</p><p>利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信，发送端从应用层往下走而接收端网上走回应用层。</p><p>例如HTTP: </p><ol><li><p>客户端：</p><p>在应用层（HTTP协议）发出一个想看某网站的HTTP请求（报文）</p><p>在传输层（TCP协议）把从应用层收到的HTTP请求报文进行分割，并在各个报文上打上标记序号及端口号（增加TCP首部）</p><p>在网络层（IP协议)增加作为通信目的地的MAC地址（增加IP首部）</p><p>链路层增加以太网首部</p></li><li><p>服务器端： 链路层收到数据后逐层上传到应用层，成功收到请求。（每通过一层就删除对应首部）</p></li><li><p>这种把数据信息包装起来的做法就叫做封装。</p></li></ol></li><li><p>其他与HTTP关系密切的协议：</p><ol><li><p>IP协议（网际协议，位于网络层）负责传输</p><ul><li><p>作用：把各种数据包传送给对方。而要保证确实传送到对方那里，需要满足各种条件。最重要的两个条件是IP地址（节点分配到的地址）和MAC地址（网卡所属的固定地址）。IP地址可以和MAC地址进行配对。IP地址可变，MAC地址基本不会变。</p></li><li><p>IP间的通信依赖MAC地址。通信双方通常要经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。此时需要用到ARP协议（一种用以解析地址的协议，根据通信方的IP地址就可以反查出对应的MAC地址。）</p></li></ul></li><li><p>TCP协议（传输层，提供可靠的字节流服务） 确保可靠性</p><ul><li><p>字节流服务：为了方便传输，将大块数据分割成报文段为单位的数据包进行管理。</p></li><li><p>可靠的传输服务：把数据准确可靠的传输给对方。（三次握手）</p></li><li><p>TCP协议为了更容易传送大数据才把数据分割，而且TCP协议能够确认数据最终是否送达到对方。</p></li><li><p>三次握手：为了准确无误的将数据送达目标处，TCP协议采用三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否成功送达。握手过程中使用了TCP的标志——SYN和ACK。</p><p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。最后，发送端再回传一个带ACK标志的数据包，代表握手结束。</p><p>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p></li></ul></li><li><p>DNS服务（位于应用层，负责提供域名到IP地址之间的解析服务）负责域名解析</p><ul><li>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过IP地址访问。而计算机则需要IP地址，为了解决这个问题，DNS服务应运而生。DNS协议是提供通过域名查找IP地址，或逆向从IP地址反查域名的服务。</li></ul></li></ol></li><li><p>URI（统一资源标识符）和URL（统一资源定位符）</p><ul><li><p>URI（Uniform Resource Identifier）由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。</p><ol><li>Uniform：规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案（如http:或ftp:）也更容易。</li><li>Resource：资源的定义是“可标识的任何东西”。除了文档文件、图像和服务（例如当天的天气预报）等能够区别于其他类型的，全部都可以作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。</li><li>Identifier：表示可标识的对象。标识符</li></ol></li><li><p>URI用字符串标识某一互联网资源，而URL表示资源的地点（互联网上所处的位置）。可见URL是URI的子集。</p></li><li><p>绝对URI格式</p><p><img src= "/img/loading.gif" data-src="%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%9B%BE%E8%A7%A3http%E3%80%8B%EF%BC%88%E4%B8%80%EF%BC%89/1.png" alt="1"></p><ol><li><p>协议方案名：使用http:或https:等协议方案名获取访问资源时要指定协议的类型。不区分字母大小写，最后附一个冒号（：）。</p><p>也可以使用data：或javascript：这类指定数据或脚本程序的方案名。</p></li><li><p>登录信息（认证）：指定用故名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项为可选项。</p></li><li><p>服务器地址：使用绝对URI必须指定带访问的服务器网址。地址可以是类似hackr.jp这种DNS可解析的名称，或是192.168.1.1这类IPv4地址名，还可以是[0:0:0:0:0:0:0:1]这样用方括号括起来的IPv6地址名。zidongshiyongmorendua服务器端口号：指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。</p></li><li><p>带层次的文件路径：指定服务器上的文件路径来定位指定的资源。这与UNIX系统的文件目录结构相似。</p></li><li><p>查询字符串：针对以指定的文件路径内的资源，可以使用查询字符串传入任意参数，此项可选。</p></li><li><p>片段标识符：使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在RFC（用来指定HTTP协议技术标准的文档，征求修正意见书）中并没有明确规定其使用方法。此项可选。</p></li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;读书笔记《图解http》（一）&quot;&gt;&lt;a href=&quot;#读书笔记《图解http》（一）&quot; class=&quot;headerlink&quot; title=&quot;读书笔记《图解http》（一）&quot;&gt;&lt;/a&gt;读书笔记《图解http》（一）&lt;/h1&gt;&lt;h2 id=&quot;1-web及网络基础&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>原型、原型对象及原型链</title>
    <link href="http://yoursite.com/2020/09/18/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2020/09/18/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-09-18T07:08:31.000Z</published>
    <updated>2020-09-21T06:20:27.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型、原型对象及原型链"><a href="#原型、原型对象及原型链" class="headerlink" title="原型、原型对象及原型链"></a>原型、原型对象及原型链</h1><p><img src= "/img/loading.gif" data-src="/2020/09/18/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/1.jpg" alt="1"></p><p>在学习这些概念之前，我们先通过构造函数创建一个对象，以便更好理解这些概念。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="string">"29"</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Sofware Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">//"Nicholas"</span></span><br><span class="line"></span><br><span class="line">alert(person1.sayName == person2.sayName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="原型（prototype）和原型对象"><a href="#原型（prototype）和原型对象" class="headerlink" title="原型（prototype）和原型对象"></a>原型（prototype）和原型对象</h2><p>我们所创建的每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象。而这个对象的用途就是包含可以由特定类型的所有实例共享的属性和方法（原型对象）。【是与实例共享属性和方法，构造函数本身没有得到这些属性和方法：<code>console.log(Person.age)    //undefinde</code>】</p><h2 id="constructor-和-proto-属性"><a href="#constructor-和-proto-属性" class="headerlink" title="constructor 和 __proto__  属性"></a>constructor 和 <code>__proto__</code>  属性</h2><h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。</p><p><code>Person.prototype.constructor == Person</code> </p><p>而通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。</p><p>创建了自定义构造函数之后，其原型对象默认只会取得constructor属性；至于其他方法则是从Object继承而来的。</p><h3 id="proto-属性"><a href="#proto-属性" class="headerlink" title="_proto_  属性"></a><code>_proto_</code>  属性</h3><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。es5中管这个指针叫[[Prototype]]。虽然脚本中没有标准方式访问[[Prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性 <code>__proto__</code>。在其他实现中，这个属性对脚本完全不可见。【本质上是一个内部属性，而不是正式对外的API，ES6附录新增】</p><p>无论从语义角度还是从兼容性角度，都不要使用这个属性（<code>__protp__</code>）而是使用以下方法：</p><ol><li><p><code>Object.setPrototypeOf(object, prototype)</code>（写操作）ES6正式推荐的设置原型对象的方法</p></li><li><p><code>Object.getPrototypeOf(obj)</code>（读操作）读取一个对象的prototype对象（ES5新增）</p></li><li><p><code>Object.create()</code>（生成操作）创建一个新对象，使用现有的对象来提供新创建对象的<code>__protp__</code> （ES5新增）</p></li><li><p><code>isPrototypeOf()</code>确定对象之间是否存在 <code>__proto__</code>的关系 （古老用法）</p></li></ol><p>注意：这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p><p>虽然可以通过实例对象访问保存在原型中的值，但不能通过实例对象重写原型中的值。如果我们在实例中添加一个属性，而该属性与实例原型中的属性同名，该属性会屏蔽原型中的同名属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="string">"29"</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Sofware Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person1.Name = <span class="string">"Greg"</span></span><br><span class="line"></span><br><span class="line">alert(person1.name); <span class="comment">//"Greg" 来自实例</span></span><br><span class="line">alert(person2.name); <span class="comment">//"Nicholas" 来自原型</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链是实现继承的主要方式，基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p><h3 id="原型链的概念"><a href="#原型链的概念" class="headerlink" title="原型链的概念"></a>原型链的概念</h3><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。如果原型对象是另一个类型的实例，那么原型对象将包含一个指向另一个原型的指针。相应的，另一个原型也包含着一个指向另一个构造函数的指针。如果另一个原型又是另一个类型的实例，那么上述关系仍成立，如此层层递进，就形成了实例与原型的链条，这就是原型链的基本概念。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">        SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">        alert(instance.getSuperValue());<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="默认的原型"><a href="#默认的原型" class="headerlink" title="默认的原型"></a>默认的原型</h3><p>所有的引用类型默认都继承了Object，而这个继承也是通过原型链实现的。所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。</p><h2 id="参考书籍："><a href="#参考书籍：" class="headerlink" title="参考书籍："></a>参考书籍：</h2><ul><li>JavaScript高级程序设计（第三版）</li><li>ES6标准入门（第二版）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型、原型对象及原型链&quot;&gt;&lt;a href=&quot;#原型、原型对象及原型链&quot; class=&quot;headerlink&quot; title=&quot;原型、原型对象及原型链&quot;&gt;&lt;/a&gt;原型、原型对象及原型链&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-
      
    
    </summary>
    
    
    
      <category term="JavaScript ES6 原型" scheme="http://yoursite.com/tags/JavaScript-ES6-%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的Hexo博客搭建</title>
    <link href="http://yoursite.com/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-09-11T12:17:03.000Z</published>
    <updated>2020-09-21T06:20:48.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始的Hexo博客搭建"><a href="#从零开始的Hexo博客搭建" class="headerlink" title="从零开始的Hexo博客搭建"></a>从零开始的Hexo博客搭建</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>尝试博客入门的不二之选。</p><h2 id="第一步-环境搭建"><a href="#第一步-环境搭建" class="headerlink" title="第一步 环境搭建"></a>第一步 环境搭建</h2><h3 id="1-1-创建-github-账号"><a href="#1-1-创建-github-账号" class="headerlink" title="1.1 创建 github 账号"></a>1.1 创建 github 账号</h3><p>注册地址： <a href="https://github.com/join" target="_blank" rel="noopener">https://github.com/join</a></p><h3 id="1-2-git-的安装"><a href="#1-2-git-的安装" class="headerlink" title="1.2 git 的安装"></a>1.2 git 的安装</h3><h3 id="1-3-node-js-的安装"><a href="#1-3-node-js-的安装" class="headerlink" title="1.3 node.js 的安装"></a>1.3 node.js 的安装</h3><p>下载地址： <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a> （直接下载安装即可，安装一直按next）</p><p>打开命令行方式（2种）：1.使用快捷键 win + r ，输入cmd ; 2.搜索打开powershell</p><p>安装完成后，在命令行中输入 node -v，验证node是否安装成功；输入 npm -v，验证npm是否安装成功：</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.PNG" alt="1"></p><p>（此时显示的v12.18.2及6.14.5为所安装node及npm的版本号，显示版本号及安装成功）</p><p>cnpm</p><ul><li><p>利用npm安装 cnpm （目的是加快下载速度）</p></li><li><p>淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p></li><li><p>安装：命令行中输入以下内容<br><code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code>  </p><p>(registry 镜像源) 这里可能安装较慢建议耐心等待</p></li><li><p>输入 cnpm -v，验证cnpm是否安装成功： (cnpm显示版本号为6.1.1，安装成功)</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.PNG" alt="2"></p></li></ul><h2 id="第二步-Hexo-的搭建"><a href="#第二步-Hexo-的搭建" class="headerlink" title="第二步 Hexo 的搭建"></a>第二步 Hexo 的搭建</h2><h3 id="2-1-Hexo-的安装"><a href="#2-1-Hexo-的安装" class="headerlink" title="2.1 Hexo 的安装"></a>2.1 Hexo 的安装</h3><ul><li><p>安装：在命令行中输入</p><p><code>cnpm install -g hexo-cli</code></p></li><li><p>输入 hexo -v，验证hexo是否安装成功</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.PNG" alt="3"></p></li></ul><h3 id="2-2-开始搭建-Hexo-博客"><a href="#2-2-开始搭建-Hexo-博客" class="headerlink" title="2.2 开始搭建 Hexo 博客"></a>2.2 开始搭建 Hexo 博客</h3><ol><li><p>建立一个空白的文件夹起名为blog</p></li><li><p>命令行切换到这个名为blog的文件夹目录下（输入 <code>cd 文件地址</code> 进行切换）</p></li><li><p>初始化hexo博客：命令行输入 <code>hexo init</code>  （这一步很慢，要耐心等待）</p></li><li><p>启动博客：命令行输入 <code>hexo s</code>  （平时用于blog页面预览）<img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.PNG" alt="4"></p><p>（此时在浏览器中输入<a href="http://localhost:4000/即可打开blog页面）" target="_blank" rel="noopener">http://localhost:4000/即可打开blog页面）</a></p></li></ol><h3 id="2-3-上传文章"><a href="#2-3-上传文章" class="headerlink" title="2.3 上传文章"></a>2.3 上传文章</h3><p>创建一篇文章：命令行输入<code>hexo new &quot;文章标题&quot;</code>（简写： <code>hexo n &quot;文章标题&quot;</code>）</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.PNG" alt="5"></p><p>（创建文章成功后可根据created后的地址找到文章进行内容的编撰，也可直接在命令行中编写；一般文章会自动创建在/blog/source/_posts中）</p><p>完成后命令行输入<code>hexo generte</code> （简写：<code>hexo g</code>）生成文章</p><h2 id="第三步-通过-github-部署到远端"><a href="#第三步-通过-github-部署到远端" class="headerlink" title="第三步 通过 github 部署到远端"></a>第三步 通过 github 部署到远端</h2><h3 id="3-1-创建github仓库"><a href="#3-1-创建github仓库" class="headerlink" title="3.1 创建github仓库"></a>3.1 创建github仓库<img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6.PNG" alt="6"></h3><p>（点击加号图标下的 New respository 创建新的github仓库）</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/7.PNG" alt="7"></p><p>注意：respository name 一定要写自己的昵称，比如此时应当填写 Juttayao.github.io（即 昵称.github.io) ；description（描述你的项目）中填自己想写的内容即可。</p><h3 id="3-2-安装-git-插件"><a href="#3-2-安装-git-插件" class="headerlink" title="3.2 安装 git 插件"></a>3.2 安装 git 插件</h3><p>输入命令行 <code>cnpm install --save hexo-deployer-git</code></p><h3 id="3-3-配置-config-yml-文件（blog文件夹中）"><a href="#3-3-配置-config-yml-文件（blog文件夹中）" class="headerlink" title="3.3 配置 _config.yml 文件（blog文件夹中）"></a>3.3 配置 _config.yml 文件（blog文件夹中）</h3><p>将文件最底部的deploy改为以下形式：</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/8.PNG" alt="8"></p><p>（repo参数部分昵称要改为自己的昵称，即<a href="https://github.com/昵称/昵称.github.io.git）" target="_blank" rel="noopener">https://github.com/昵称/昵称.github.io.git）</a></p><h3 id="3-4-部署到远端"><a href="#3-4-部署到远端" class="headerlink" title="3.4 部署到远端"></a>3.4 部署到远端</h3><p>输入命令行 <code>hexo d</code> 即部署到远端 (过程中会需要输入github的账号和密码)</p><h2 id="第四步-更换主题"><a href="#第四步-更换主题" class="headerlink" title="第四步 更换主题"></a>第四步 更换主题</h2><p>主题选择可参考问题：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335</a> （有哪些好看的 Hexo 主题？）</p><p>对选择的主题进行美化可参考文章：<a href="https://zhuanlan.zhihu.com/p/69211731" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69211731</a> （Hexo 博客美化合集）</p><p>这里我们以一款主题为例具体讲一下如何更换主题</p><ol><li><p>下载主题： 命令行输入 <code>git clone https://github.com/litten/hexo-thema-yilia.git themes/yilia</code>  （将yilia主题克隆到blog文件的themes中命名为yilia）</p></li><li><p>将主题配置到自己的博客 </p><ul><li><p>方式：配置 _config.yml 文件（blog文件夹中）</p><p><img src= "/img/loading.gif" data-src="/2020/09/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/9.PNG" alt="9"></p></li></ul></li></ol><p>（将此处的theme设置为自己想要更改的主题，此处改为yilia）</p><p>3.此时已经更改成功 命令行输入<code>hexo clean</code> <code>hexo g</code> <code>hexo s</code>即可预览自己想要的效果；<code>hexo d</code>即将新效果推送到远端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从零开始的Hexo博客搭建&quot;&gt;&lt;a href=&quot;#从零开始的Hexo博客搭建&quot; class=&quot;headerlink&quot; title=&quot;从零开始的Hexo博客搭建&quot;&gt;&lt;/a&gt;从零开始的Hexo博客搭建&lt;/h1&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/25/hello-world/"/>
    <id>http://yoursite.com/2020/06/25/hello-world/</id>
    <published>2020-06-25T09:00:44.078Z</published>
    <updated>2020-06-25T09:00:44.078Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
